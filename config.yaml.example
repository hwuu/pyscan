llm:
  base_url: "https://api.openai.com/v1"
  api_key: "sk-xxx"  # 替换为你的 API key
  model: "gpt-4"
  max_tokens: 8000
  temperature: 0.2

scan:
  exclude_patterns:
    - "test_*.py"
    - "*_test.py"
    - "config.py"
    - "settings.py"
    - "*/site-packages/*"
    - "*/venv/*"
    - "*/.venv/*"

# Bug 过滤配置
filter:
  # 排除的 bug 类型（完全匹配）
  exclude_types:
    # - "资源管理错误"
    # - "业务逻辑错误"
    # - "安全漏洞"
  # 排除的严重程度
  exclude_severities:
    # - "low"
    # - "medium"

detector:
  max_retries: 3
  concurrency: 1
  context_token_limit: 6000  # Context 最大长度要小于 llm 的 max_tokens
  # use_tiktoken: false  # 是否使用 tiktoken 精确计算 token 数 (默认: false, 使用字符估算)

# Layer 1 静态分析工具配置
# 作用：为 LLM 提供静态分析上下文（类型错误、安全问题），增强 prompt
# 注意：Layer 1 的结果不会直接输出到报告，只用于引导 LLM 专注于深层次问题
layer1:
  enable_mypy: true      # 启用 mypy 类型检查
  enable_bandit: true    # 启用 bandit 安全扫描

# Layer 4 交叉验证配置
# 建议：设置为 false，让 PyScan 只输出 LLM 发现的深度 bug
# 如果启用，Layer 4 会把 Layer 1 的结果转换成 bug 报告（与产品定位不符）
layer4:
  enable_cross_validation: false  # 禁用 Layer 4 交叉验证（推荐）
  confidence_threshold: 0.7       # 最低置信度阈值
  position_tolerance: 2           # 位置匹配容忍度（行数）
  enable_deduplication: true      # 启用去重

# Git 平台配置（可选）
# 用于 pyscan_viz --git-enrich 功能，支持自定义企业内部 Git 服务器的 commit URL 生成规则
# 如果不配置此段，pyscan_viz 会使用内置的 GitHub、GitLab、Gitee、Bitbucket 配置
git:
  platforms:
    # 示例 1: 企业 GitLab 实例
    - name: company-gitlab              # 平台名称（唯一标识）
      detect_pattern: gitlab.company.com  # 用于检测 remote URL 的字符串模式
      repo_path_regex: '[:/]([^/:]+/[^/]+?)(?:\.git)?$'  # 从 URL 提取 repo_path 的正则（必须包含捕获组）
      commit_url_template: 'https://gitlab.company.com/{repo_path}/-/commit/{hash}'  # Commit URL 模板

    # 示例 2: Azure DevOps
    # - name: azure-devops
    #   detect_pattern: dev.azure.com
    #   repo_path_regex: 'dev\.azure\.com/([^/]+/[^/]+/_git/[^/]+)'
    #   commit_url_template: 'https://dev.azure.com/{repo_path}/commit/{hash}'

    # 示例 3: 覆盖内置 GitHub 配置（使用自定义 commit viewer）
    # - name: github
    #   detect_pattern: github.com
    #   repo_path_regex: '[:/]([^/:]+/[^/]+?)(?:\.git)?$'
    #   commit_url_template: 'https://custom-github-viewer.com/{repo_path}/commits/{hash}'

# 配置字段说明：
# - name: 平台名称（唯一标识），自定义平台可以覆盖同名内置平台
# - detect_pattern: 用于检测 remote URL 的字符串模式（更长的模式优先匹配）
# - repo_path_regex: 从 remote URL 提取仓库路径的正则表达式
#   * 必须包含至少一个捕获组 (...) 用于提取 repo_path
# - commit_url_template: Commit URL 模板
#   * 必须包含 {repo_path} 和 {hash} 占位符
#
# 内置支持的平台：GitHub, GitLab, Gitee, Bitbucket
